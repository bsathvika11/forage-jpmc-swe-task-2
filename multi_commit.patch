From d220167ab4c9444195ae30a7d6b4d243583ab21b Mon Sep 17 00:00:00 2001
From: Josiah Chapman <josiah.chapman@gmail.com>
Date: Tue, 2 Aug 2022 21:02:55 -0700
Subject: [PATCH 1/4] added project files

---
 .gitignore             |    23 +
 package-lock.json      | 36201 +++++++++++++++++++++++++++++++++++++++
 package.json           |    40 +
 public/index.html      |    36 +
 server.py              |   342 +
 src/App.css            |    49 +
 src/App.test.js        |     9 +
 src/App.tsx            |    74 +
 src/DataStreamer.ts    |    40 +
 src/Graph.css          |     4 +
 src/Graph.tsx          |    73 +
 src/index.css          |    14 +
 src/index.tsx          |    14 +
 src/react-app-env.d.ts |     1 +
 test.csv               |  1832 ++
 tsconfig.json          |    25 +
 16 files changed, 38777 insertions(+)
 create mode 100755 .gitignore
 create mode 100644 package-lock.json
 create mode 100644 package.json
 create mode 100755 public/index.html
 create mode 100644 server.py
 create mode 100755 src/App.css
 create mode 100755 src/App.test.js
 create mode 100755 src/App.tsx
 create mode 100644 src/DataStreamer.ts
 create mode 100644 src/Graph.css
 create mode 100644 src/Graph.tsx
 create mode 100755 src/index.css
 create mode 100755 src/index.tsx
 create mode 100644 src/react-app-env.d.ts
 create mode 100644 test.csv
 create mode 100644 tsconfig.json

diff --git a/.gitignore b/.gitignore
new file mode 100755
index 0000000..4d29575
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,23 @@
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.js
+
+# testing
+/coverage
+
+# production
+/build
+
+# misc
+.DS_Store
+.env.local
+.env.development.local
+.env.test.local
+.env.production.local
+
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..21b4315
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,36201 @@
+{
+  "name": "bank-merge-co-task-2",
+  "version": "0.1.0",
+  "lockfileVersion": 2,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "bank-merge-co-task-2",
+      "version": "0.1.0",
+      "dependencies": {
+        "@finos/perspective": "^1.6.2",
+        "@finos/perspective-viewer": "^1.6.2",
+        "@finos/perspective-viewer-d3fc": "^1.6.2",
+        "@finos/perspective-viewer-datagrid": "^1.6.2",
+        "@types/jest": "^23.3.13",
+        "@types/node": "^10.12.19",
+        "@types/react": "^16.9.0",
+        "@types/react-dom": "^16.0.11",
+        "bootstrap": "^4.2.1",
+        "puppeteer": "^1.19.0",
+        "react": "^16.9.0",
+        "react-dom": "^16.9.0",
+        "react-scripts": "2.1.3"
+      },
+      "devDependencies": {
+        "awesome-typescript-loader": "^5.2.1",
+        "source-map-loader": "^0.2.4",
+        "typescript": "^3.2.4"
+      }
+    },
+
diff --git a/package.json b/package.json
index ca234e9..2051f84 100644
--- a/package.json
+++ b/package.json
@@ -15,7 +15,7 @@
     "puppeteer": "^1.19.0",
     "react": "^16.9.0",
     "react-dom": "^16.9.0",
-    "react-scripts": "2.1.3"
+    "react-scripts": "^2.1.3"
   },
   "scripts": {
     "start": "react-scripts --openssl-legacy-provider start",
@@ -23,9 +23,7 @@
     "test": "react-scripts test",
     "eject": "react-scripts eject"
   },
-  "eslintConfig": {
-    "extends": "react-app"
-  },
+
   "browserslist": [
     ">0.2%",
     "not dead",
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..edf2a6a 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,13 +1,14 @@
-import React, { Component } from 'react';
-import DataStreamer, { ServerRespond } from './DataStreamer';
-import Graph from './Graph';
-import './App.css';
+import React, { Component } from "react";
+import DataStreamer, { ServerRespond } from "./DataStreamer";
+import Graph from "./Graph";
+import "./App.css";

 /**
  * State declaration for <App />
  */
 interface IState {
-  data: ServerRespond[],
+  data: ServerRespond[];
+  showGraph: boolean;
 }

 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }

@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return <Graph data={this.state.data} />;
+    }
   }

   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        // Update the state by creating a new array of data that consists of
+        // Previous data in the state and the new data from server
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }

   /**
@@ -49,25 +63,25 @@ class App extends Component<{}, IState> {
   render() {
     return (
       <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
+        <header className="App-header">Bank & Merge Co Task 2</header>
         <div className="App-content">
-          <button className="btn btn-primary Stream-button"
+          <button
+            className="btn btn-primary Stream-button"
             // when button is click, our react app tries to request
             // new data from the server.
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
+            onClick={() => {
+              this.getDataFromServer();
+            }}
+          >
             Start Streaming Data
           </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
+          <div className="Graph">{this.renderGraph()}</div>
         </div>
       </div>
-    )
+    );
   }
 }

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..6ae74b1 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,21 +1,21 @@
-import React, { Component } from 'react';
-import { Table } from '@finos/perspective';
-import { ServerRespond } from './DataStreamer';
-import './Graph.css';
+import React, { Component } from "react";
+import { Table } from "@finos/perspective";
+import { ServerRespond } from "./DataStreamer";
+import "./Graph.css";

 /**
  * Props declaration for <Graph />
  */
 interface IProps {
-  data: ServerRespond[],
+  data: ServerRespond[];
 }

 /**
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
-  load: (table: Table) => void,
+interface PerspectiveViewerElement extends HTMLElement {
+  load: (table: Table) => void;
 }

 /**
@@ -27,18 +27,20 @@ class Graph extends Component<IProps, {}> {
   table: Table | undefined;

   render() {
-    return React.createElement('perspective-viewer');
+    return React.createElement("perspective-viewer");
   }

   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName(
+      "perspective-viewer"
+    )[0] as unknown as PerspectiveViewerElement;

     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
+      stock: "string",
+      top_ask_price: "float",
+      top_bid_price: "float",
+      timestamp: "date",
     };

     if (window.perspective && window.perspective.worker()) {
@@ -48,6 +50,16 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.

       // Add more Perspective configurations here.
+      elem.setAttribute("view", "y_line");
+      elem.setAttribute("column-pivots", '["stock"]');
+      elem.setAttribute("row-pivots", '["timestamp"]');
+      elem.setAttribute("columns", '["top_ask_price"]');
+      elem.setAttribute("aggregates", {`
+        "stock": "distinct count",
+        "top_ask_price": "avg",
+        "top_bid_price": "avg",
+        "timestamp": "distinct count",
+      `});
       elem.load(this.table);
     }
   }
@@ -57,15 +69,17 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // As part of the task, you need to fix the way we update the data props to
       // avoid inserting duplicated entries into Perspective table again.
-      this.table.update(this.props.data.map((el: any) => {
-        // Format the data from ServerRespond to the schema
-        return {
-          stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
-          timestamp: el.timestamp,
-        };
-      }));
+      this.table.update(
+        this.props.data.map((el: any) => {
+          // Format the data from ServerRespond to the schema
+          return {
+            stock: el.stock,
+            top_ask_price: (el.top_ask && el.top_ask.price) || 0,
+            top_bid_price: (el.top_bid && el.top_bid.price) || 0,
+            timestamp: el.timestamp,
+          };
+        })
+      );
     }
   }
 }
--
2.45.1.windows.1
